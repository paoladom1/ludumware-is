generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  status        UserStatus    @default(INACTIVE)
  role          UserRole      @default(CANDIDATE)
  gender        Gender        @default(OTHER)
  name          String
  lastname      String?
  email         String        @unique
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  applications  Application[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Application {
  id                      String            @id @default(cuid())
  firstName               String
  lastName                String
  email                   String            @unique
  photoUrl                String?
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  address                 String
  facebookUrl             String?
  levelOfStudy            LevelOfStudy      @default(OTHER)
  tuition                 Float
  enrollment              Float?
  semester                Int?
  yearOfStudy             String
  hasJob                  Boolean
  institutionName         String
  institutionAddress      String
  institutionPhoneNumber  String
  careerName              String
  placeOfWork             String?
  salary                  Float?
  position                String?
  workAddress             String?
  workPhoneNumber         String?
  municipalityId          String
  userId                  String
  dui                     String?           @unique
  academicReferenceName   String?
  academicReferenceNumber String?
  dateOfBirth             DateTime?
  gender                  Gender?           @default(OTHER)
  status                  ApplicationStatus @default(PENDING)
  declineReason           String?
  pendingReason           String?
  municipality            Municipality      @relation(fields: [municipalityId], references: [id])
  user                    User              @relation(fields: [userId], references: [id])
  record                  Record?
}

model Document {
  id          String @id @default(cuid())
  description String
  photoUrl    String
  docUrl      String
  recordId    String
}

model Record {
  id            String      @id @default(cuid())
  renewal       Boolean     @default(false)
  newAdmission  Boolean     @default(true)
  applicationId String      @unique
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model Municipality {
  id           String        @id @default(cuid())
  name         String
  departmentId String
  department   Department    @relation(fields: [departmentId], references: [id])
  Application  Application[]
}

model Department {
  id             String         @id @default(cuid())
  name           String         @unique
  municipalities Municipality[]
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  DENIED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum UserRole {
  ADMIN
  SCHOLAR
  CANDIDATE
}

enum LevelOfStudy {
  BACHILLERATO_TECNICO
  BACHILLERATO_GENERAL
  UNIVERSIDAD
  TECNICO
  OTHER
}
