// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

enum UserStatus {
    ACTIVE
    INACTIVE
}

enum UserRole {
    ADMIN
    SCHOLAR
    CANDIDATE
}

enum LevelOfStudy {
    BACHILLERATO_TECNICO
    BACHILLERATO_GENERAL
    UNIVERSIDAD
    TECNICO
    OTHER
}

model User {
    id          String     @id @default(cuid())
    status      UserStatus @default(INACTIVE)
    role        UserRole   @default(CANDIDATE)
    gender      Gender     @default(OTHER)
    name        String
    lastname    String?
    email       String     @unique
    dateOfBirth DateTime?
    dui         String?

    image         String?
    emailVerified DateTime?

    accounts     Account[]
    sessions     Session[]
    applications Application[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Application {
    id                     String       @id @default(cuid())
    firstName              String
    lastName               String
    email                  String       @unique
    photoUrl               String?
    createdAt              DateTime     @default(now())
    updatedAt              DateTime     @updatedAt
    address                String
    personalPhoneNumber    String
    facebookUrl            String
    levelOfStudy           LevelOfStudy @default(OTHER)
    tuition                Float
    enrollment             Float?
    semester               Int?
    yearOfStudy            Int
    hasJob                 String
    institutionName        String
    institutionAddress     String
    institutionPhoneNumber String
    careerName             String
    placeOfWork            String?
    salary                 Float?
    position               String?
    workAddress            String?
    workPhoneNumber        String?

    jobId          String?
    municipalityId String?
    userId         String

    municipality Municipality? @relation(fields: [municipalityId], references: [id])
    user         User          @relation(fields: [userId], references: [id])
    record       Record?
}

model Document {
    id          String @id @default(cuid())
    description String
    photoUrl    String
    docUrl      String
    recordId    String
}

model Record {
    id            String  @id @default(cuid())
    renewal       Boolean @default(false)
    newAdmission  Boolean @default(true)
    userId        String
    applicationId String  @unique

    application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model Municipality {
    id           String @id @default(cuid())
    name         String
    departmentId String

    department  Department    @relation(fields: [departmentId], references: [id])
    Application Application[]
}

model Department {
    id   String @id @default(cuid())
    name String @unique

    municipalities Municipality[]
}
